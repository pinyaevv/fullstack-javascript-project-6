mixin formFor(entity = null, options = {})
  - const getInputName = (property) => `data[${property}]`
  - const getInputId = (property) => `data_${property}`
  - const url = options.action || ''
  - const method = options.method || 'POST'
  form(action=url method=method)&attributes(attributes)
    if method !== 'GET' && method !== 'POST'
      input(type='hidden' name='_method' value=method)
    block

mixin input(entity, propertyName, errors = {})
  - const getInputName = (property) => `data[${property}]`
  - const getInputId = (property) => `data_${property}`
  - propertyErrors = _.get(errors, propertyName)
  - classLine = 'form-control' + (_.isEmpty(propertyErrors) ? '' : ' is-invalid')
  - inputId = getInputId(propertyName)
  .mb-3(class=(errors[propertyName] && 'has-danger'))
    label(
      for= inputId
    )= attributes.label || propertyName
    input(
      id= inputId
      name=getInputName(propertyName)
      class=classLine
      value=_.get(entity, propertyName, '')
    )&attributes(attributes)
    if !_.isEmpty(propertyErrors)
      .invalid-feedback= propertyErrors.map(({ message }) => message).join('. ')

mixin submit(value, attributes)
  input(type='submit' value=value class='btn btn-primary')&attributes(attributes)

mixin buttonTo(action, method, value, attributes)
  form(action=action, method="post")
    input(type="hidden" name="_method" value=method)
    input(type="submit" value=value class='btn btn-sm btn-outline-danger')&attributes(attributes)
